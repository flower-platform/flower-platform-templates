<%
import org.flowerplatform.util.Utils;
import org.flowerplatform.util.UtilConstants;
import org.flowerplatform.arduino.ArduinoNodeConstants;
import org.flowerplatform.core.nature.MainModelNature;
import org.flowerplatform.core.CoreNodeConstants;
import org.flowerplatform.core.CoreConstants;

final PROPERTY_NAME = "name";

def rappId = Utils.getRepo(node.nodeUri);
def platformId = node.getPropertyValue(CoreNodeConstants.PROPERTY_CONFIG_REPOSITORY_SETS);

def componentsNode = nodeService.navigateByType(node.nodeUri, ['componentsRoot']);

def httpServer = null;
for (instance in rappStructureService.getInstances(rappId)) { 
	if (instance.type == "HttpServer") {
		httpServer = instance;
	}
}

// html UI
def uiRepoName = node.getPropertyValue("uiRepository");
def uiRepoRootNode = MainModelNature.getMainModel(uiRepoName);
def componentsRootNodeOfUiRepo = nodeService.navigateByType(uiRepoRootNode.nodeUri, [CoreNodeConstants.TYPE_COMPONENTS_ROOT]);
def generatedUiCode = templateGenerationService.generateFiles(componentsRootNodeOfUiRepo.nodeUri, CoreConstants.DEFAULT, false, null)[0].content;
htmlCompressor.setCompressCss(true);               
htmlCompressor.setCompressJavaScript(true);
def minifiedcode = htmlCompressor.compress(generatedUiCode);
def htmlArray = templateUtils.bytesToHexArray(templateUtils.gzip(minifiedcode), 512, 4);

def convertDataType(type) {
	if (type == null) {
		return "void";
	}
	switch(type) {
		case "string": return "const char*";
		default: return type;
	}
}

%>#!/usr/bin/python

import os
import signal
import sys
import time
import RPi.GPIO as GPIO

from FlowerPlatformRuntime import ValueChangedEvent

<%	
	import org.flowerplatform.util.Pair; 
	Pair<String, String>[] imports = templateUtils.getImports(componentsNode.getNodeUri());
	for (Pair<String, String> importPair : imports) {
		// in python when import files we must not include .py extension like cpp (.h, .c, .cpp)
		def fileName = importPair.a.replace(".py", "");
		def componentName = importPair.b;
		if (componentName != templateUtils.INITIAL_IMPORT) {
			%>from FlowerPlatformRuntime import ${componentName}\r\n<%
		} else {
			%>import ${fileName}\r\n<%
		}
	}
	
%>

class AppGen :
	
<% 
// Functions
for (function in rappStructureService.getFunctions(rappId)) {
	def functionDeclaration = "def " + function.name + "(self";
	for (param in function.parameters) {
		functionDeclaration += ", " + param.name;
	}
	functionDeclaration += ")";
	def code;// = blocklyToCppConverter.convert(function.blocklyContent);
	code = (code == null ? "" : code.toString(2));
%>	$functionDeclaration :
<%= code ? code : "\t\treturn" %>

<% 
}

// Event handlers
for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = libraryService.getComponentByName(platformId, instance.type);
	for (eventHandler in instance.eventHandlers) {
		def code;// = blocklyToCppConverter.convert(eventHandler.blocklyContent);
		code = (code == null ? "" : code.toString(2));
%>	def ${instance.name}_${eventHandler.name}(self, event) :
<%= code ? code : "\t\treturn" %>
	
<%	} // end for loop events
} // end for loop instances

if (httpServer != null) {   /****************************************** HttpServer ************************************************/
%>	def ${httpServer.name}_onCommandReceived(self, event) :
		urlFound = False
		
		if (event.url == "") :
			event.client.send_response(200)
			event.client.send_header("Content-type", "text/html")
			event.client.send_header("Content-Encoding", "gzip")
			event.client.end_headers()
			htmlPage = [
$htmlArray
			]
			event.client.wfile.write(bytearray(htmlPage))
			return
<% 
	
	for (function in rappStructureService.getFunctions(rappId)) {
		if (!function.accessibleViaWeb) {
			continue;
		}
%>		elif (event.url == "$function.name") :
			urlFound = True
<%		def functionCall = "self." + function.name + "(";
		for (param in function.parameters) {
			functionCall += param.name + ", ";
			if (param.type == "String") {
%>			char $paramName[32];
			event->server->getStringParameterValue(event->url, "$param.name", $param.name);
<%			} else {
%>			int $paramName = event->server->getIntParameterValue(event->url, "$param.name");
<%			}
		}
		if(function.parameters.size() > 0) {
			functionCall = functionCall[0..-3];
		}
		functionCall += ")"
%>			$functionCall
<%	}
%>		elif (event.url == "getDescriptors") :
			descriptors = self.getDescriptorsAsJson()
			event.client.send_response(200)
			event.client.send_header("Content-type", "application/json")
			event.client.end_headers()
			event.client.wfile.write(descriptors)
			return
		elif (event.url == "getState") :
			urlFound = True;
		
        if not urlFound :
			event.client.send_response(404)
			return

		event.client.send_response(200)
		event.client.send_header("Content-type", "application/json")
		event.client.end_headers()
		event.client.wfile.write("{")
<%	
	first = true;
	for (instance in rappStructureService.getInstances(rappId)) { 
		if (instance.getPropertyValue("contributesToState")) {
%>		event.client.wfile.write("<%= first ? "" : "," %>\"%s\":%s" % ("${instance.name}", self.${instance.name}.getStateAsJson()))
<%			
		first = false;
		}
	} 
%>		event.client.wfile.write("}")
	
	def getDescriptorsAsJson(self) :
		json = "{\"inputs\":["
<%		
	def first = true;
	for (instance in rappStructureService.getInstances(rappId)) { 
		if (instance.getPropertyValue("contributesToState")) {
%>		json += "<%= first ? "" : "," %>{\"label\":\"${instance.name}\", \"property\":\"${instance.name}\"}"
<% 			first = false;
		}
	}
%>		json += "],\"commands\":["
<%	
	first = true;
	for (function in rappStructureService.getFunctions(rappId)) {
		if (function.accessibleViaWeb) {
			def paramList = "";
			def firstParam = true;
			for (param in function.parameters) {
				paramList += (firstParam ? "" : "; ") + param.name + ":" + param.type;
				firstParam = false;
			}
%>		json += "<%= first ? "" : "," %>{\"label\":\"${function.name}\", \"command\":\"${function.name}\", \"parameters\":\"${paramList}\"}"
<% 			first = false;
		}
	}
%>		json += "]}"
		return json

<% 
} // end if httpServer   	/*******************************************************************************************************/
%>	def setup(self):
		signal.signal(signal.SIGTERM, self.stop)
		signal.signal(signal.SIGINT, self.stop)
		
<% 
for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = libraryService.getComponentByName(platformId, instance.type);
%>		self.$instance.name = ${instance.type}()
<% 
	for (property in componentModel.getAllProperties()) {
		def propertyValue = instance.getPropertyValue(property.name);
		if (propertyValue == null) {
			continue;
		}
		if (property.type == "char") {
%>		self.${instance.name}.$property.name = "$propertyValue"
<% 		} else {
%>		self.${instance.name}.$property.name = $propertyValue
<% 		}	
	}
	// set event handlers
	for (eventHandler in instance.eventHandlers) {
		def eventArgumentClass = componentModel.getEventByName(eventHandler.name).getType();
%>		self.${instance.name}.${eventHandler.name} = self.${instance.name}_${eventHandler.name}
<%	}
	if (instance.name == httpServer.name) {
%>		self.${instance.name}.onCommandReceived = self.${instance.name}_onCommandReceived
<%	}
%>
<% 
}
for (instance in rappStructureService.getInstances(rappId)) { 
%>		self.${instance.name}.setup()
<%}
%>	
	def start(self) :
		self.running = True
		while self.running :
<% 
for (instance in rappStructureService.getInstances(rappId)) { 
%>			self.${instance.name}.loop()
<%}
%>			time.sleep(0.01)
		GPIO.cleanup()
		sys.exit(0)

    def stop(self, signal, frame) :
<% 
for (instance in rappStructureService.getInstances(rappId)) { 
%>		self.${instance.name}.stop()
<%}
%>		self.running = False
		

if __name__ == '__main__' :
    app = AppGen()
    app.setup()
    app.start()
