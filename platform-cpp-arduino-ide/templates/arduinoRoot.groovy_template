<%
import org.flowerplatform.util.Utils;
import org.flowerplatform.util.UtilConstants;
import org.flowerplatform.arduino.ArduinoNodeConstants;
import org.flowerplatform.core.nature.MainModelNature;
import org.flowerplatform.core.CoreNodeConstants;
import org.flowerplatform.core.CoreConstants;

final PROPERTY_NAME = "name";

def rappId = Utils.getRepo(node.nodeUri);
def platformId = node.getPropertyValue(CoreNodeConstants.PROPERTY_CONFIG_REPOSITORY_SETS);

def componentsNode = nodeService.navigateByType(node.nodeUri, ['componentsRoot']);

%>#include <Arduino.h>
#include <HardwareSerial.h>
#include <stdbool.h>

<%	import org.flowerplatform.util.Pair;
	Pair<String, String>[] imports = templateUtils.getImports(componentsNode.getNodeUri());
	for (Pair<String, String> importPair : imports) {
		def fileName = importPair.a;

%>#include <${fileName}>\r\n<%
	}
%>

class AppGen {
public: 

<%
def httpServer = null;

// Components declaration
for (instance in rappStructureService.getInstances(rappId)) { 
%>	$instance.type $instance.name;\r\n<%
	if (instance.type == "HttpServer") {
		httpServer = instance;
	}
}
%>\r\n<%
// Event handlers
for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = componentService.getComponentByName(platformId, instance.type);
	for (eventHandler in instance.eventHandlers) {
%>	void ${instance.name}_${eventHandler.name}(${componentModel.getEventByName(eventHandler.name).getType()} event) {
		// blockly code here
	}
<%	} // end for loop events
} // end for loop instances

if (httpServer != null) {   /****************************************** HttpServer ************************************************/
	def uiRepoName = node.getPropertyValue("uiRepository");
	def uiRepoRootNode = MainModelNature.getMainModel(uiRepoName);
	def componentsRootNodeOfUiRepo = nodeService.navigateByType(uiRepoRootNode.nodeUri, [CoreNodeConstants.TYPE_COMPONENTS_ROOT]);
	def generatedUiCode = templateGenerationService.generateFiles(componentsRootNodeOfUiRepo.nodeUri, CoreConstants.DEFAULT, false, null)[0].content;
	
	htmlCompressor.setCompressCss(true);               
	htmlCompressor.setCompressJavaScript(true);
	def minifiedcode = htmlCompressor.compress(generatedUiCode);
%>
	void ${httpServer.name}_onCommandReceived(HttpCommandEvent* event) {
		char command[32];
		event->server->getCommandFromUrl(event->url, command);
		bool urlFound = false;
		
		BufferedPrint out(event->client);
		if (strcmp_P(command, PSTR("")) == 0) {
			urlFound = true;
<% 
	for (item in utils.split(minifiedcode)) {
%>			out.write_P(PSTR("$item")));\r\n <%
	} 
	for (function in rappStructureService.getFunctions(rappId)) {
		if (!function.accessibleViaWeb) {
			continue;
		}
		def functionName = function.name;
		functionName = functionName.substring(0, functionName.indexOf("("));
%>		} else if (strcmp_P(command, PSTR("$functionName")) == 0) { <%
%>			${functionName}();<%
		def functionCall = functionName + "(";
		for (param in function.parameters) {
		} 
	}
%>		} else if (strcmp_P(command, PSTR("getState")) == 0) {
			urlFound = true;
		}
		
		if (urlFound) {
			event->server->httpSuccess(&out);
			//printStateAsJson(&out);
		} else {
			event->server->httpError404(&out);
		}
		out.flush();
	}
<%
} // end if httpServer   	/*******************************************************************************************************/
%>
	void setup() {
<%
for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = componentService.getComponentByName(platformId, instance.type);
	for (property in componentModel.getAllProperties()) {
		def propertyValue = instance.getPropertyValue(property.name);
		if (propertyValue == null) {
			continue;
		}
		if (property.type == "char") {
	%>		${instance.name}.$property.name = "$propertyValue";\r\n<% 
		} else if (property.pointer) {
	%>		${instance.name}.$property.name = &$propertyValue;\r\n<% 
		} else {
	%>		${instance.name}.$property.name = $propertyValue;\r\n<% 
		}	
	}
	// set event handlers
	for (eventHandler in instance.eventHandlers) {
		def eventArgumentClass = componentModel.getEventByName(eventHandler.name).getType();
%>		${instance.name}.${eventHandler.name} = new DelegatingCallback<AppGen, ${eventArgumentClass}>(this, &AppGen::${instance.name}_${eventHandler.name}); <%
	}
%>\r\n<%
}%>
	}

	void loop() {
		
	}
	
}
