<%
import org.flowerplatform.util.Utils;
import org.flowerplatform.util.UtilConstants;
import org.flowerplatform.arduino.ArduinoNodeConstants;
import org.flowerplatform.core.nature.MainModelNature;
import org.flowerplatform.core.CoreNodeConstants;
import org.flowerplatform.core.CoreConstants;

// The name we use for the class we generate to store code in.
final MAIN_CLASS_NAME = "AppGen";
// The name of the node property that gives us the name (of the component, etc)
final PROPERTY_NAME = "name";

def rappId = Utils.getRepo(node.nodeUri);
def platformId = node.getPropertyValue(CoreNodeConstants.PROPERTY_CONFIG_REPOSITORY_SETS);

def componentsNode = nodeService.navigateByType(node.nodeUri, ['componentsRoot']);

// html UI
def uiRepoName = node.getPropertyValue("uiRepository");
def uiRepoRootNode = MainModelNature.getMainModel(uiRepoName);
def componentsRootNodeOfUiRepo = nodeService.navigateByType(uiRepoRootNode.nodeUri, [CoreNodeConstants.TYPE_COMPONENTS_ROOT]);
def generatedUiCode = templateGenerationService.generateFiles(componentsRootNodeOfUiRepo.nodeUri, CoreConstants.DEFAULT, false, null)[0].content;
htmlCompressor.setCompressCss(true);               
htmlCompressor.setCompressJavaScript(true);
def minifiedcode = htmlCompressor.compress(generatedUiCode);
def htmlArray = templateUtils.bytesToHexArray(templateUtils.gzip(minifiedcode), 512, 4);

// Returns true if any of the given instances have a non-null constructorVariant (i.e.
// they choose to use a custom constructor as opposed to the default one.
def anyInstanceHasConstructorVariant(instances) {
	for (instance in instances) {
		if (instance.hasConstructorVariant()) {
			return true;
		}
	}
	return false;
}

%>#include <Arduino.h>
#include <HardwareSerial.h>
#include <stdbool.h>

<%	import org.flowerplatform.gwt.shared.util.Pair;
	Pair<String, String>[] imports = rappStructureService.getImports(rappId);
	for (Pair<String, String> importPair : imports) {
		def fileName = importPair.a;
%>#include <${fileName}>
<%	}
%>

class ${MAIN_CLASS_NAME} {
public: 
	
<%
def httpServer = null;
def instances = rappStructureService.getInstances(rappId);

// Components declaration
for (instance in instances) { 
%>	${instance.type} ${instance.name};
<%	if (instance.type == "HttpServer") {
		httpServer = instance;
	}
}
%>
<%
for (var in rappStructureService.getVariables(rappId)) {
%>	$var.type $var.name;
<% 
}

if (anyInstanceHasConstructorVariant(instances)) {
%>
	${MAIN_CLASS_NAME}()
<%
	boolean firstWithConstructorVariant = true; // need to know when to print separator
	for (instance in instances) {
		if (!instance.hasConstructorVariant()) {
			continue;
		}

		if (firstWithConstructorVariant) {
			firstWithConstructorVariant = false;
%>		: <%
		} else {
%>		, <%
		}
		
		def componentModel = libraryService.getComponentByName(platformId, instance.type);
		def constructor = componentModel.getConstructorByConstructorVariant(instance.getConstructorVariant());
		if (constructor != null) {
			%>${instance.name}(<%
			def parameters = constructor.getParameters();
			if (parameters != null) {
				for (int i=0; i<parameters.size(); i++) {
					if (i>0) {
						%>,<%
					}
					def param = parameters.get(i);
					if (param.type == "String") {
						%>"${instance.getConstructorParameterValue(param.getName())}"<%
					} else if (param.pointer) {
						%>&${instance.getConstructorParameterValue(param.getName())}<%
					} else {
						%>${instance.getConstructorParameterValue(param.getName())}<%
					}
				}
			}
			%>)
<%
		} else {
			throw new NullPointerException("Specified constructor was not found on the component " + instance.getName() + " of type " + instance.getType());
		}
	}
%>	{};
<%
}
%>
<% 
// Functions
for (function in rappStructureService.getFunctions(rappId)) {
	def name = function.name;
	
	// Check if the name of the user-defined function is one of the "reserved" ones.
	if (rappStructureService.isSpecialFunction(name)) {
		name = rappStructureService.getNewSpecialFunctionName(name);
	}

	def functionDeclaration = (function.type == null ? "void" : function.type) + " " + name + "(";
	for (param in function.parameters) {
		functionDeclaration += param.type + " " + param.name + ", ";
	}
	if(function.parameters.size() > 0) {
		functionDeclaration = functionDeclaration[0..-3];
	}
	functionDeclaration += ")";
	def code = null;
	if (function.blocklyContent != null) {
		code = blocklyToCppConverter.convert(function.blocklyContent);
	}
	code = (code == null ? "" : code.toString(2));
%>	$functionDeclaration {
$code
	}

<% 
}

// Event handlers
for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = libraryService.getComponentByName(platformId, instance.type);
	for (eventHandler in instance.eventHandlers) {
	def code = null;
	if (eventHandler.blocklyContent != null) {
		code = blocklyToCppConverter.convert(eventHandler.blocklyContent);
	}
	code = (code == null ? "" : code.toString(2));
%>	void ${instance.name}_${eventHandler.name}(${componentModel.getEventByName(eventHandler.name).getType()}* event) {
$code
	}
<%	} // end for loop events
} // end for loop instances

if (httpServer != null) {   /****************************************** HttpServer ************************************************/
%>
	void ${httpServer.name}_onCommandReceived(HttpCommandEvent* event) {
		char command[32];
		event->server->getCommandFromUrl(event->url, command);
		bool urlFound = false;
		
		BufferedPrint out(event->client);
		if (strcmp_P(command, PSTR("")) == 0) {
			event->server->httpSuccess(&out, HttpServer::CONTENT_TYPE_HTML, true);
			static const uint8_t HTML_PAGE[] PROGMEM = {
$htmlArray
			};
			out.write_P(HTML_PAGE, (sizeof(HTML_PAGE)/sizeof(*HTML_PAGE)));
			out.flush();
			return;
<% 
	for (function in rappStructureService.getFunctions(rappId)) {
		if (!function.accessibleViaWeb) {
			continue;
		}
%>		} else if (strcmp_P(command, PSTR("$function.name")) == 0) {
			urlFound = true;
<%		def functionCall = function.name + "(";
		for (param in function.parameters) {
			functionCall += param.name + ", ";
			if (param.type == "String") {
%>			char ${param.name}Buf[32];
			event->server->getStringParameterValue(event->url, "$param.name", ${param.name}Buf);
			String ${param.name} = ${param.name}Buf;
<%			} else {
%>			int $param.name = event->server->getIntParameterValue(event->url, "$param.name");
<%			}
		}
		if (function.parameters.size() > 0) {
			functionCall = functionCall[0..-3];
		}
		functionCall += ");"
%>			$functionCall
<%	}
%>		} else if (strcmp_P(command, PSTR("getDescriptors")) == 0) {
			printDescriptorsAsJson(&out);
			out.flush();
			return;
		} else if (strcmp_P(command, PSTR("getState")) == 0) {
			urlFound = true;
		}
		
		if (urlFound) {
			event->server->httpSuccess(&out);
			printStateAsJson(&out);
		} else {
			event->server->httpError404(&out);
		}
		out.flush();
	}
	
	void printDescriptorsAsJson(Print* print) {
		print->print(F("{\"inputs\":["));
<%		
	def first = true;
	for (instance in rappStructureService.getInstances(rappId)) { 
		if (instance.getPropertyValue("contributesToState")) {
%>		print->print(F("<%= first ? "" : "," %>{\"label\":\"${instance.name}\", \"property\":\"${instance.name}\"}"));
<% 			first = false;
		}
	}
%>
		print->print(F("],\"commands\":["));
<%	
	first = true;
	for (function in rappStructureService.getFunctions(rappId)) {
		if (function.accessibleViaWeb) {
			def paramList = "";
			def firstParam = true;
			for (param in function.parameters) {
				paramList += (firstParam ? "" : "; ") + param.name + ":" + param.type;
				firstParam = false;
			}
%>		print->print(F("<%= first ? "" : "," %>{\"label\":\"${function.name}\", \"command\":\"${function.name}\", \"parameters\":\"${paramList}\"}"));
<% 			first = false;
		}
	}
	%>		
		print->print(F("]}"));

	}
	
	void printStateAsJson(Print* print) {
		print->print(F("{"));
<%		
	for (instance in rappStructureService.getInstances(rappId)) { 
		if (instance.getPropertyValue("contributesToState")) {
%>		${instance.name}.printStateAsJson(F("${instance.name}"), print);
		print->print(F(","));
<%		}
	} 
%>	
		write_P(print, PSTR("\"freeMem\": "));
		print->print(freeRam());
		print->print("}");
	}
<% 
} // end if httpServer   	/*******************************************************************************************************/
%>
	void setup() {
<% 

// First, check to see if there are any user defined functions with the name "setup".
// If yes, then add call to "_setup" here.
for (function in rappStructureService.getFunctions(rappId)) {
	if ("setup".equals(function.name)) {
		def functionName = rappStructureService.getNewSpecialFunctionName(function.name);
%>		$functionName();
		
<%
	}
}

for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = libraryService.getComponentByName(platformId, instance.type);
	for (property in componentModel.getAllProperties()) {
		def propertyValue = instance.getPropertyValue(property.name);
		if (propertyValue == null) {
			continue;
		}
		if (property.type == "String") {
%>		${instance.name}.$property.name = "$propertyValue";
<% 		} else if (property.pointer) {
%>		${instance.name}.$property.name = &$propertyValue;
<% 		} else {
%>		${instance.name}.$property.name = $propertyValue;
<% 		}	
	}
	// set event handlers
	for (eventHandler in instance.eventHandlers) {
		def eventArgumentClass = componentModel.getEventByName(eventHandler.name).getType();
%>		${instance.name}.${eventHandler.name} = new DelegatingCallback<AppGen, ${eventArgumentClass}>(this, &AppGen::${instance.name}_${eventHandler.name}); 
<%	}
	if (httpServer != null && instance.name == httpServer.name) {
%>		${instance.name}.onCommandReceived = new DelegatingCallback<AppGen, HttpCommandEvent>(this, &AppGen::${instance.name}_onCommandReceived); 
<%	}
%>
<% 
}

for (instance in rappStructureService.getInstances(rappId)) { 
	if(templateUtils.checkIfMethodExists(instance, platformId, "setup")) {
%>		${instance.name}.setup();
<%	}
}
%>	}

	void loop() {
<% 
// First, check to see if there are any user defined functions with the name "loop".
// If yes, then add call to "_loop" here.
for (function in rappStructureService.getFunctions(rappId)) {
	if ("loop".equals(function.name)) {
		def functionName = rappStructureService.getNewSpecialFunctionName(function.name);
%>		$functionName();
		
<%
	}
}

for (instance in rappStructureService.getInstances(rappId)) { 
	if(templateUtils.checkIfMethodExists(instance, platformId, "loop")) {	
%>		${instance.name}.loop();
<%	}
}
%>	}

};

#include "CustomCode.h"

App app;

void setup() {
	Serial.begin(115200);
	app.setup();
}

void loop() {
	app.loop();
}
