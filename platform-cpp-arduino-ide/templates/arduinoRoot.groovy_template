<%
import org.flowerplatform.util.Utils;
import org.flowerplatform.util.UtilConstants;
import org.flowerplatform.arduino.ArduinoNodeConstants;
import org.flowerplatform.core.nature.MainModelNature;
import org.flowerplatform.core.CoreNodeConstants;
import org.flowerplatform.core.CoreConstants;

final PROPERTY_NAME = "name";

def rappId = Utils.getRepo(node.nodeUri);
def platformId = node.getPropertyValue(CoreNodeConstants.PROPERTY_CONFIG_REPOSITORY_SETS);

def componentsNode = nodeService.navigateByType(node.nodeUri, ['componentsRoot']);

// html UI
def uiRepoName = node.getPropertyValue("uiRepository");
def uiRepoRootNode = MainModelNature.getMainModel(uiRepoName);
def componentsRootNodeOfUiRepo = nodeService.navigateByType(uiRepoRootNode.nodeUri, [CoreNodeConstants.TYPE_COMPONENTS_ROOT]);
def generatedUiCode = templateGenerationService.generateFiles(componentsRootNodeOfUiRepo.nodeUri, CoreConstants.DEFAULT, false, null)[0].content;
htmlCompressor.setCompressCss(true);               
htmlCompressor.setCompressJavaScript(true);
def minifiedcode = htmlCompressor.compress(generatedUiCode);
def htmlArray = templateUtils.bytesToHexArray(templateUtils.gzip(minifiedcode), 512, 4);

def convertDataType(type) {
	if (type == null) {
		return "void";
	}
	switch(type) {
		case "string": return "const char*";
		default: return type;
	}
}

%>#include <Arduino.h>
#include <HardwareSerial.h>
#include <stdbool.h>

<%	import org.flowerplatform.util.Pair;
	Pair<String, String>[] imports = templateUtils.getImports(componentsNode.getNodeUri());
	for (Pair<String, String> importPair : imports) {
		def fileName = importPair.a;
%>#include <${fileName}>
<%	}
%>

class AppGen {
public: 
	
<%
def httpServer = null;

// Components declaration
for (instance in rappStructureService.getInstances(rappId)) { 
%>	$instance.type $instance.name;
<%	if (instance.type == "HttpServer") {
		httpServer = instance;
	}
}
%>
<%
for (var in rappStructureService.getVariables(rappId)) {
	def varType = convertDataType(var.type);
%>	$varType $var.name;
<% 
}
%>
<% 
// Functions
for (function in rappStructureService.getFunctions(rappId)) {
	def functionDeclaration = convertDataType(function.type) + " " + function.name + "(";
	for (param in function.parameters) {
		functionDeclaration += convertDataType(param.type) + " " + param.name + ", ";
	}
	if(function.parameters.size() > 0) {
		functionDeclaration = functionDeclaration[0..-3];
	}
	functionDeclaration += ")";
	def code = null;
	if (function.blocklyContent != null) {
		code = blocklyToCppConverter.convert(function.blocklyContent);
	}
	code = (code == null ? "" : code.toString(2));
%>	$functionDeclaration {
$code
	}

<% 
}

// Event handlers
for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = componentService.getComponentByName(platformId, instance.type);
	for (eventHandler in instance.eventHandlers) {
	def code = null;
	if (eventHandler.blocklyContent != null) {
		code = blocklyToCppConverter.convert(eventHandler.blocklyContent);
	}
	code = (code == null ? "" : code.toString(2));
%>	void ${instance.name}_${eventHandler.name}(${componentModel.getEventByName(eventHandler.name).getType()}* event) {
$code
	}
<%	} // end for loop events
} // end for loop instances

if (httpServer != null) {   /****************************************** HttpServer ************************************************/
%>
	void ${httpServer.name}_onCommandReceived(HttpCommandEvent* event) {
		char command[32];
		event->server->getCommandFromUrl(event->url, command);
		bool urlFound = false;
		
		BufferedPrint out(event->client);
		if (strcmp_P(command, PSTR("")) == 0) {
			event->server->httpSuccess(&out, HttpServer::CONTENT_TYPE_HTML, true);
			static const uint8_t HTML_PAGE[] PROGMEM = {
$htmlArray
			};
			out.write_P(HTML_PAGE, (sizeof(HTML_PAGE)/sizeof(*HTML_PAGE)));
			out.flush();
			return;
<% 
	for (function in rappStructureService.getFunctions(rappId)) {
		if (!function.accessibleViaWeb) {
			continue;
		}
%>		} else if (strcmp_P(command, PSTR("$function.name")) == 0) {
			urlFound = true;
<%		def functionCall = function.name + "(";
		for (param in function.parameters) {
			functionCall += param.name + ", ";
			if (param.type == "string") {
%>			char ${param.name}[32];
			event->server->getStringParameterValue(event->url, "$param.name", $param.name);
<%			} else {
%>			int $param.name = event->server->getIntParameterValue(event->url, "$param.name");
<%			}
		}
		if (function.parameters.size() > 0) {
			functionCall = functionCall[0..-3];
		}
		functionCall += ");"
%>			$functionCall
<%	}
%>		} else if (strcmp_P(command, PSTR("getDescriptors")) == 0) {
			printDescriptorsAsJson(&out);
			out.flush();
			return;
		} else if (strcmp_P(command, PSTR("getState")) == 0) {
			urlFound = true;
		}
		
		if (urlFound) {
			event->server->httpSuccess(&out);
			printStateAsJson(&out);
		} else {
			event->server->httpError404(&out);
		}
		out.flush();
	}
	
	void printDescriptorsAsJson(Print* print) {
		print->print(F("{\"inputs\":["));
<%		
	def first = true;
	for (instance in rappStructureService.getInstances(rappId)) { 
		if (instance.getPropertyValue("contributesToState")) {
%>		print->print(F("<%= first ? "" : "," %>{\"label\":\"${instance.name}\", \"property\":\"${instance.name}\"}"));
<% 			first = false;
		}
	}
%>
		print->print(F("],\"commands\":["));
<%	
	first = true;
	for (function in rappStructureService.getFunctions(rappId)) {
		if (function.accessibleViaWeb) {
			def paramList = "";
			def firstParam = true;
			for (param in function.parameters) {
				paramList += (firstParam ? "" : "; ") + param.name + ":" + param.type;
				firstParam = false;
			}
%>		print->print(F("<%= first ? "" : "," %>{\"label\":\"${function.name}\", \"command\":\"${function.name}\", \"parameters\":\"${paramList}\"}"));
<% 			first = false;
		}
	}
	%>		
		print->print(F("]}"));

	}
	
	void printStateAsJson(Print* print) {
		print->print(F("{"));
<%		
	for (instance in rappStructureService.getInstances(rappId)) { 
		if (instance.getPropertyValue("contributesToState")) {
%>		${instance.name}.printStateAsJson(F("${instance.name}"), print);
		print->print(F(","));
<%		}
	} 
%>	
		write_P(print, PSTR("\"freeMem\": "));
		print->print(freeRam());
		print->print("}");
	}
<% 
} // end if httpServer   	/*******************************************************************************************************/
%>
	void setup() {
<% 
for (instance in rappStructureService.getInstances(rappId)) { 
	def componentModel = componentService.getComponentByName(platformId, instance.type);
	for (property in componentModel.getAllProperties()) {
		def propertyValue = instance.getPropertyValue(property.name);
		if (propertyValue == null) {
			continue;
		}
		if (property.type == "char") {
%>		${instance.name}.$property.name = "$propertyValue";
<% 		} else if (property.pointer) {
%>		${instance.name}.$property.name = &$propertyValue;
<% 		} else {
%>		${instance.name}.$property.name = $propertyValue;
<% 		}	
	}
	// set event handlers
	for (eventHandler in instance.eventHandlers) {
		def eventArgumentClass = componentModel.getEventByName(eventHandler.name).getType();
%>		${instance.name}.${eventHandler.name} = new DelegatingCallback<AppGen, ${eventArgumentClass}>(this, &AppGen::${instance.name}_${eventHandler.name}); 
<%	}
	if (httpServer != null && instance.name == httpServer.name) {
%>		${instance.name}.onCommandReceived = new DelegatingCallback<AppGen, HttpCommandEvent>(this, &AppGen::${instance.name}_onCommandReceived); 
<%	}
%>
<% 
}

for (instance in rappStructureService.getInstances(rappId)) { 
%>		${instance.name}.setup();
<%}
%>	}

	void loop() {
<% 
for (instance in rappStructureService.getInstances(rappId)) { 
%>		${instance.name}.loop();
<% 
}
%>	}
	
};

#include "CustomCode.h"

App app;

void setup() {
	Serial.begin(115200);
	app.setup();
}

void loop() {
	app.loop();
}
